apiVersion: v1
kind: Template
metadata:
  name: ${SERVICE_NAME}-${ENVIRONMENT}-app

objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: trusted-service-cert
      namespace: ${PROJECT_NAMESPACE}-${ENVIRONMENT}
      label:
        app: ${SERVICE_NAME}
      annotations:
        service.beta.openshift.io/inject-cabundle: "true"

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENVIRONMENT}
      annotations:
        service.alpha.openshift.io/serving-cert-secret-name: ${SERVICE_NAME}-service-cert
      label:
        app: ${SERVICE_NAME}
    spec:
      selector:
        app: ${SERVICE_NAME}
      ports:
        - name: api
          port: 8443
          protocol: TCP
          targetPort: 8081

  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${SERVICE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENVIRONMENT}
      label:
        app: ${SERVICE_NAME}
    spec:
      port:
        targetPort: api
      to:
        kind: Service
        name: ${SERVICE_NAME}
        weight: 100
      tls:
        termination: reencrypt
        insecureEdgeTerminationPolicy: Redirect
      wildcardPolicy: None

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: nginx-configmap
      namespace: ${PROJECT_NAMESPACE}-${ENVIRONMENT}
    labels:
      app: nginx
    data:
      app-nginx.conf: |-
        server {
          listen 8443 ssl;
          ssl_certificate /etc/nginx/certs/tls.crt;
          ssl_certificate_key /etc/nginx/certs/tls.key;

          location / {
           proxy_pass http://localhost:8081/;
          }
        }

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: nginx
      name: nginx-deployment
      namespace: ${PROJECT_NAMESPACE}-${ENVIRONMENT}
    spec:
      replicas: 1
      selector:
        app: nginx
      strategy:
        resources: { }
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: nginx
        spec:
          containers:
            - name: nginx-sidecar-proxy
              image: nginx:latest
              imagePullPolicy: Always
              ports:
                - containerPort: 8443
                  protocol: TCP
              volumeMounts:
                - name: nginx-cert-vol
                  mountPath: /etc/nginx/certs
                - name: nginx-configmap-vol
                  mountPath: /etc/nginx/conf.d/
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "1Gi"
                  cpu: "1"
              terminationMessagePath: FallbackToLogsOnError
          restartPolicy: Always
          volumes:
            - name: nginx-cert-vol
              secret:
                secretName: ${SERVICE_NAME}-service-cert
            - name: nginx-configmap-vol
              configMap:
                name: nginx-configmap

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: kafka-client-service
      name: kafka-client-service
      namespace: ${PROJECT_NAMESPACE}-${ENVIRONMENT}
    spec:
      replicas: 1
      selector:
        app: kafka-client-service
      strategy:
        resources: { }
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: kafka-client-service
        spec:
          initContainers:
            - name: import-kafka-cert-to-truststore
              image: registry.access.redhat.com/redhat-sso-7/sso71-openshift:1.1-16
              imagePullPolicy: Always
              env:
                - name: kafka_truststore
                  value: /usr/share/kafka-client-service/truststore.kafka.jks
                - name: service_ca
                  value: /data1/certs/service-ca.crt
              command: [ "/bin/bash","-c" ]
              args: ["pwd && ls -l && ls -l /data1/certs && keytool -import -alias ca -file $service_ca -keystore $kafka_truststore -storepass changeit -noprompt"]
              volumeMounts:
                - name: trusted-service-cert-vol
                  mountPath: /data1/certs
                - name: kafka-client-service-vol
                  mountPath: /usr/share/kafka-client-service
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "1Gi"
                  cpu: "500m"
          containers:
            - name: ${SERVICE_NAME}
              image: javabypatel/kafka-client-service:latest
              imagePullPolicy: Always
              ports:
                - containerPort: 8081
                  protocol: TCP
              volumeMounts:
                - name: kafka-client-service-vol
                  mountPath: /usr/share/kafka-client-service
              resources:
                requests:
                  memory: "256Mi"
                  cpu: "100m"
                limits:
                  memory: "1Gi"
                  cpu: "1"
              terminationMessagePath: FallbackToLogsOnError
          restartPolicy: Always
          volumes:
            - name: trusted-service-cert-vol
              configMap:
                name: trusted-service-cert
            - name: kafka-client-service-vol
              emptyDir:
                medium: Memory

parameters:
  - name: SERVICE_NAME
    description: The name of the service for this template
    value: kafka-client-service
    required: true
  - name: PROJECT_NAMESPACE
    description: the namespace name
    value: kafka-on-openshift
    required: true
  - name: ENVIRONMENT
    description: The Openshift environment
    required: true

